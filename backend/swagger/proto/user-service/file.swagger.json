{
  "swagger": "2.0",
  "info": {
    "title": "File Service API",
    "description": "API for managing file uploads and deletion.",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "FileService",
      "description": "Operations related to file upload, deletion, and listing."
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/files": {
      "post": {
        "summary": "Upload File",
        "operationId": "FileService_Upload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceUploadFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceUploadFileRequest"
            }
          }
        ],
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/files/batch": {
      "post": {
        "summary": "Get Multiple Files By IDs",
        "operationId": "FileService_GetByIDs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceGetFilesByIDsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userserviceGetFilesByIDsRequest"
            }
          }
        ],
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/files/{id}": {
      "delete": {
        "summary": "Delete File",
        "operationId": "FileService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "UUID of the file metadata to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hardDelete",
            "description": "Perform hard delete if true (also deletes from storage).",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          }
        ],
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/users/{userId}/files": {
      "get": {
        "summary": "List Files Uploaded by User",
        "description": "Retrieves a paginated list of file metadata uploaded by a specific user.",
        "operationId": "FileService_ListUserFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userserviceListUserFilesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "UUID of the user whose uploaded files to list.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "options.limit",
            "description": "Maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "50"
          },
          {
            "name": "options.offset",
            "description": "Number of items to skip before starting to collect the result set (for pagination).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "0"
          },
          {
            "name": "options.sortBy",
            "description": "Field name to sort the results by (e.g., 'created_at', 'name').",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "\"created_at\""
          },
          {
            "name": "options.sortDesc",
            "description": "Set to true to sort in descending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "true"
          },
          {
            "name": "options.filters",
            "description": "Key-value pairs for specific field filtering. Values should correspond to google.protobuf.Value structure (e.g., {\"email\": \"user@gmail.com\"}).",
            "in": "query",
            "required": false
          },
          {
            "name": "options.includeDeleted",
            "description": "Set to true to include soft-deleted records in the results.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          }
        ],
        "tags": [
          "Files",
          "Users"
        ]
      }
    }
  },
  "definitions": {
    "coreFilterOptions": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 50,
          "default": "50",
          "description": "Maximum number of items to return per page."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "default": "0",
          "description": "Number of items to skip before starting to collect the result set (for pagination)."
        },
        "sortBy": {
          "type": "string",
          "example": "created_at",
          "default": "\"created_at\"",
          "description": "Field name to sort the results by (e.g., 'created_at', 'name')."
        },
        "sortDesc": {
          "type": "boolean",
          "example": true,
          "default": "true",
          "description": "Set to true to sort in descending order."
        },
        "filters": {
          "type": "object",
          "example": {
            "email": "user@gmail.com"
          },
          "additionalProperties": {},
          "description": "Key-value pairs for specific field filtering. Values should correspond to google.protobuf.Value structure (e.g., {\"email\": \"user@gmail.com\"})."
        },
        "includeDeleted": {
          "type": "boolean",
          "example": false,
          "default": "false",
          "description": "Set to true to include soft-deleted records in the results."
        }
      },
      "description": "Represents common filtering, pagination, and sorting options.\nBased on pkg/core/types/common.go FilterOptions struct."
    },
    "corePaginationInfo": {
      "type": "object",
      "properties": {
        "totalItems": {
          "type": "string",
          "format": "int64",
          "example": 1234,
          "description": "Total number of items matching the query criteria across all pages."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 50,
          "description": "The limit (page size) used for the current response."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The offset (number of items skipped) used for the current response."
        }
      },
      "description": "Represents common pagination metadata included in list responses.\nBased on pkg/core/types/common.go PaginationResult struct (metadata fields only).\nSpecific list responses should include this alongside their repeated items field."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "userserviceFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "uuid-string",
          "description": "Unique identifier (UUID)."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "timestamp-string",
          "description": "Creation timestamp."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "timestamp-string",
          "description": "Last update timestamp."
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "example": "timestamp-string",
          "description": "Deletion timestamp (if soft-deleted)."
        },
        "name": {
          "type": "string",
          "example": "document.pdf",
          "description": "Original filename."
        },
        "serviceInternalId": {
          "type": "string",
          "example": "storage-service-id-123",
          "description": "Internal ID used by the file storage service (e.g., Google Drive File ID)."
        },
        "type": {
          "type": "string",
          "example": "application/pdf",
          "description": "MIME type of the file."
        },
        "size": {
          "type": "string",
          "format": "int64",
          "example": 1048576,
          "description": "File size in bytes.",
          "title": "1 MB"
        },
        "url": {
          "type": "string",
          "example": "https://storage.example.com/download/storage-service-id-123",
          "description": "Direct URL to download the file."
        }
      },
      "description": "Represents file metadata stored in the system.",
      "title": "File",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "name",
        "serviceInternalId",
        "type",
        "size",
        "url"
      ]
    },
    "userserviceGetFilesByIDsRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "example": [
            "file-uuid-1",
            "file-uuid-2"
          ],
          "items": {
            "type": "string"
          },
          "description": "List of file UUIDs to retrieve."
        }
      },
      "title": "Get Files By IDs Request",
      "required": [
        "ids"
      ]
    },
    "userserviceGetFilesByIDsResponse": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userserviceFile"
          },
          "description": "List of found files matching the provided IDs."
        }
      },
      "title": "Get Files By IDs Response"
    },
    "userserviceListUserFilesResponse": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userserviceFile"
          }
        },
        "paginationInfo": {
          "$ref": "#/definitions/corePaginationInfo",
          "title": "Reuse core pagination info"
        }
      },
      "title": "List User Files Response"
    },
    "userserviceUploadFileRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "image.jpg",
          "description": "Original filename (MUST be sent in the first stream message).",
          "title": "Metadata fields (sent individually at the start)"
        },
        "type": {
          "type": "string",
          "example": "image/jpeg",
          "description": "MIME type (MUST be sent in the second stream message)."
        },
        "chunkData": {
          "type": "string",
          "format": "byte",
          "description": "A chunk of the file's binary data (MUST be sent in the third and subsequent stream messages).",
          "title": "File content chunk"
        }
      },
      "title": "--- Upload Request/Response (Client Streaming with Flattened Metadata) ---"
    },
    "userserviceUploadFileResponse": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/userserviceFile"
        }
      },
      "title": "Upload File Response"
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "description": "JWT Bearer token (e.g., 'Bearer ey...')",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}
