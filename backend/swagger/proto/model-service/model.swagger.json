{
  "swagger": "2.0",
  "info": {
    "title": "Model Service API",
    "description": "API for managing AI model metadata.",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "ModelService",
      "description": "Operations related to managing AI model metadata"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/models": {
      "get": {
        "summary": "List Model Metadata Records",
        "description": "Retrieves a paginated list of AI model metadata records with filtering options.",
        "operationId": "ModelService_ListModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelserviceListModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "options.limit",
            "description": "Maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "50"
          },
          {
            "name": "options.offset",
            "description": "Number of items to skip before starting to collect the result set (for pagination).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "0"
          },
          {
            "name": "options.sortBy",
            "description": "Field name to sort the results by (e.g., 'created_at', 'name').",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "\"created_at\""
          },
          {
            "name": "options.sortDesc",
            "description": "Set to true to sort in descending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "true"
          },
          {
            "name": "options.filters",
            "description": "Key-value pairs for specific field filtering. Values should correspond to google.protobuf.Value structure (e.g., {\"email\": \"user@gmail.com\"}).",
            "in": "query",
            "required": false
          },
          {
            "name": "options.includeDeleted",
            "description": "Set to true to include soft-deleted records in the results.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          }
        ],
        "tags": [
          "Models"
        ]
      },
      "post": {
        "summary": "Create Model Metadata Records",
        "description": "Creates one or more new AI model metadata records. The associated model file must be uploaded separately.",
        "operationId": "ModelService_CreateModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelserviceCreateModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to create one or more new AI model metadata records.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelserviceCreateModelsRequest"
            }
          }
        ],
        "tags": [
          "Models"
        ]
      },
      "put": {
        "summary": "Update Model Metadata Records",
        "description": "Updates metadata for one or more existing AI models. Does not affect the model file.",
        "operationId": "ModelService_UpdateModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelserviceUpdateModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to update one or more existing AI model metadata records.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelserviceUpdateModelsRequest"
            }
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models/by-name/{name}": {
      "get": {
        "summary": "Find Model Metadata by Name",
        "description": "Retrieves an AI model metadata record by its unique name.",
        "operationId": "ModelService_FindModelByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelserviceFindModelByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The unique name of the model to find.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models/delete": {
      "post": {
        "summary": "Delete Model Metadata Records",
        "description": "Deletes one or more AI model metadata records. Can be soft or hard delete. Does not delete the associated model file from storage.",
        "operationId": "ModelService_DeleteModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelserviceDeleteModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to delete one or more AI model metadata records by their IDs.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelserviceDeleteModelsRequest"
            }
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/stations/{stationId}/models": {
      "get": {
        "summary": "List Model Metadata by Station",
        "description": "Retrieves a paginated list of AI model metadata records associated with a specific station.",
        "operationId": "ModelService_ListModelsByStation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelserviceListModelsByStationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stationId",
            "description": "UUID of the station to list model metadata for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "options.limit",
            "description": "Maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "50"
          },
          {
            "name": "options.offset",
            "description": "Number of items to skip before starting to collect the result set (for pagination).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "0"
          },
          {
            "name": "options.sortBy",
            "description": "Field name to sort the results by (e.g., 'created_at', 'name').",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "\"created_at\""
          },
          {
            "name": "options.sortDesc",
            "description": "Set to true to sort in descending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "true"
          },
          {
            "name": "options.filters",
            "description": "Key-value pairs for specific field filtering. Values should correspond to google.protobuf.Value structure (e.g., {\"email\": \"user@gmail.com\"}).",
            "in": "query",
            "required": false
          },
          {
            "name": "options.includeDeleted",
            "description": "Set to true to include soft-deleted records in the results.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "false"
          }
        ],
        "tags": [
          "Models"
        ]
      }
    }
  },
  "definitions": {
    "coreFilterOptions": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 50,
          "default": "50",
          "description": "Maximum number of items to return per page."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "default": "0",
          "description": "Number of items to skip before starting to collect the result set (for pagination)."
        },
        "sortBy": {
          "type": "string",
          "example": "created_at",
          "default": "\"created_at\"",
          "description": "Field name to sort the results by (e.g., 'created_at', 'name')."
        },
        "sortDesc": {
          "type": "boolean",
          "example": true,
          "default": "true",
          "description": "Set to true to sort in descending order."
        },
        "filters": {
          "type": "object",
          "example": {
            "email": "user@gmail.com"
          },
          "additionalProperties": {},
          "description": "Key-value pairs for specific field filtering. Values should correspond to google.protobuf.Value structure (e.g., {\"email\": \"user@gmail.com\"})."
        },
        "includeDeleted": {
          "type": "boolean",
          "example": false,
          "default": "false",
          "description": "Set to true to include soft-deleted records in the results."
        }
      },
      "description": "Represents common filtering, pagination, and sorting options.\nBased on pkg/core/types/common.go FilterOptions struct."
    },
    "corePaginationInfo": {
      "type": "object",
      "properties": {
        "totalItems": {
          "type": "string",
          "format": "int64",
          "example": 1234,
          "description": "Total number of items matching the query criteria across all pages."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 50,
          "description": "The limit (page size) used for the current response."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The offset (number of items skipped) used for the current response."
        }
      },
      "description": "Represents common pagination metadata included in list responses.\nBased on pkg/core/types/common.go PaginationResult struct (metadata fields only).\nSpecific list responses should include this alongside their repeated items field."
    },
    "modelserviceCreateModelsRequest": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelserviceModelInput"
          },
          "description": "List of model metadata details to create."
        }
      },
      "description": "Request to create one or more new AI model metadata records.",
      "title": "Create Models Request",
      "required": [
        "models"
      ]
    },
    "modelserviceCreateModelsResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelserviceModel"
          },
          "description": "List of created model metadata records with system-generated fields populated."
        }
      },
      "description": "Contains details of the newly created AI model metadata records.",
      "title": "Create Models Response"
    },
    "modelserviceDeleteModelsRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "example": [
            "a1b2c3d4-e5f6-7890-1234-567890abcdef",
            "b2c3d4e5-f6a7-8901-2345-67890abcdef0"
          ],
          "items": {
            "type": "string"
          },
          "description": "List of model metadata UUIDs to delete."
        },
        "hardDelete": {
          "type": "boolean",
          "example": false,
          "default": "false",
          "description": "If true, performs a permanent (hard) delete. If false or omitted, performs a soft delete. Note: Does not delete the associated model file from storage."
        }
      },
      "description": "Request to delete one or more AI model metadata records by their IDs.",
      "title": "Delete Models Request",
      "required": [
        "ids"
      ]
    },
    "modelserviceDeleteModelsResponse": {
      "type": "object",
      "properties": {
        "affectedCount": {
          "type": "string",
          "format": "int64",
          "example": 2,
          "description": "Number of model metadata records that were successfully deleted."
        }
      },
      "description": "Contains information about the deletion operation.",
      "title": "Delete Models Response",
      "required": [
        "affectedCount"
      ]
    },
    "modelserviceFindModelByNameResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/modelserviceModel",
          "description": "The model metadata record matching the provided name."
        }
      },
      "description": "Contains the details of the found AI model metadata record.",
      "title": "Find Model By Name Response"
    },
    "modelserviceListModelsByStationResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelserviceModel"
          },
          "description": "List of model metadata records matching the filter criteria."
        },
        "pagination": {
          "$ref": "#/definitions/corePaginationInfo",
          "description": "Pagination information including total count and current page."
        }
      },
      "description": "Contains a paginated list of AI model metadata records for a specific station.",
      "title": "List Models By Station Response",
      "required": [
        "models",
        "pagination"
      ]
    },
    "modelserviceListModelsResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelserviceModel"
          },
          "description": "List of model metadata records matching the filter criteria."
        },
        "pagination": {
          "$ref": "#/definitions/corePaginationInfo",
          "description": "Pagination information including total count and current page."
        }
      },
      "description": "Contains a paginated list of AI model metadata records.",
      "title": "List Models Response",
      "required": [
        "models",
        "pagination"
      ]
    },
    "modelserviceModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
          "description": "Unique identifier for the model metadata record (UUID format)."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-10-27T10:00:00Z",
          "description": "Timestamp when the model metadata record was created."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-10-27T11:30:00Z",
          "description": "Timestamp when the model metadata record was last updated."
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-10-28T12:00:00Z",
          "description": "Timestamp when the model metadata was soft-deleted. Null if not deleted."
        },
        "name": {
          "type": "string",
          "example": "WaterQualityPredictor_v1",
          "description": "Name of the AI model."
        },
        "filePath": {
          "type": "string",
          "example": "/models/WaterQualityPredictor_v1.pkl",
          "description": "Path to the associated model file in the storage system."
        },
        "version": {
          "type": "string",
          "example": "1.0.2",
          "description": "Version identifier for the model."
        },
        "description": {
          "type": "string",
          "example": "Predicts WQI based on sensor readings.",
          "description": "Description of the model's purpose or characteristics."
        },
        "trainedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-09-15T14:00:00Z",
          "description": "Timestamp when the model was trained."
        },
        "stationId": {
          "type": "string",
          "example": "b2c3d4e5-f6a7-8901-2345-67890abcdef0",
          "description": "Identifier (UUID) of the station this model is associated with (if applicable)."
        },
        "availability": {
          "type": "boolean",
          "example": true,
          "description": "Indicates if the model is currently available for use."
        }
      },
      "description": "Represents metadata for a trained AI model.",
      "title": "AI Model Metadata",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "name",
        "filePath",
        "version",
        "trainedAt",
        "stationId",
        "availability"
      ]
    },
    "modelserviceModelInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "WaterQualityPredictor_v2",
          "description": "Name of the AI model."
        },
        "version": {
          "type": "string",
          "example": "2.0.0",
          "description": "Version identifier for the model."
        },
        "description": {
          "type": "string",
          "example": "Improved WQI prediction model.",
          "description": "Description of the model's purpose or characteristics."
        },
        "trainedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2024-01-20T10:00:00Z",
          "description": "Timestamp when the model was trained."
        },
        "stationId": {
          "type": "string",
          "example": "c3d4e5f6-a7b8-9012-3456-7890abcdef01",
          "description": "Identifier (UUID) of the station this model is associated with (if applicable)."
        },
        "availability": {
          "type": "boolean",
          "example": true,
          "description": "Indicates if the model should be available for use upon creation/update."
        }
      },
      "description": "Data required to create or update an AI model metadata record.",
      "title": "Model Input Metadata",
      "required": [
        "name",
        "version",
        "trainedAt",
        "stationId",
        "availability"
      ]
    },
    "modelserviceUpdateModelsRequest": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelserviceModel"
          },
          "description": "List of model metadata with updated fields. Each must include the model ID."
        }
      },
      "description": "Request to update one or more existing AI model metadata records.",
      "title": "Update Models Request",
      "required": [
        "models"
      ]
    },
    "modelserviceUpdateModelsResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelserviceModel"
          },
          "description": "List of updated model metadata records."
        }
      },
      "description": "Contains details of the updated AI model metadata records.",
      "title": "Update Models Response"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "description": "JWT Bearer token (e.g., 'Bearer ey...')",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}
