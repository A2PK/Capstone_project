syntax = "proto3";

package modelservice;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "proto/core/common.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "golang-microservices-boilerplate/proto/modelservice";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Model Service API";
    version: "1.0";
    description: "API for managing AI model metadata.";
  };
  schemes: [HTTP, HTTPS];
  consumes: ["application/json"];
  produces: ["application/json"];
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "JWT Bearer token (e.g., 'Bearer ey...')";
      }
    }
  };
  security: {
    security_requirement: {
      key: "BearerAuth";
      value: {};
    }
  }
};

// --- Model ---

message Model {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "AI Model Metadata";
      description: "Represents metadata for a trained AI model.";
      required: ["id", "created_at", "updated_at", "name", "file_path", "version", "trained_at", "station_id", "availability"];
    }
  };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Unique identifier for the model metadata record (UUID format).";
    example: "\"a1b2c3d4-e5f6-7890-1234-567890abcdef\"";
  }];
  google.protobuf.Timestamp created_at = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp when the model metadata record was created.";
    example: "\"2023-10-27T10:00:00Z\"";
  }];
  google.protobuf.Timestamp updated_at = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp when the model metadata record was last updated.";
    example: "\"2023-10-27T11:30:00Z\"";
  }];
  optional google.protobuf.Timestamp deleted_at = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp when the model metadata was soft-deleted. Null if not deleted.";
    example: "\"2023-10-28T12:00:00Z\"";
  }];
  string name = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Name of the AI model.";
    example: "\"WaterQualityPredictor_v1\"";
  }];
  string file_path = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Path to the associated model file in the storage system.";
    example: "\"/models/WaterQualityPredictor_v1.pkl\"";
  }];
  string version = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Version identifier for the model.";
    example: "\"1.0.2\"";
  }];
  string description = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Description of the model's purpose or characteristics.";
    example: "\"Predicts WQI based on sensor readings.\"";
  }];
  google.protobuf.Timestamp trained_at = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp when the model was trained.";
    example: "\"2023-09-15T14:00:00Z\"";
  }];
  string station_id = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Identifier (UUID) of the station this model is associated with (if applicable).";
    example: "\"b2c3d4e5-f6a7-8901-2345-67890abcdef0\"";
  }];
  bool availability = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Indicates if the model is currently available for use.";
    example: "true";
  }];
}

message ModelInput {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Model Input Metadata";
      description: "Data required to create or update an AI model metadata record.";
      required: ["name", "version", "trained_at", "station_id", "availability"];
    }
  };
  string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Name of the AI model.";
    example: "\"WaterQualityPredictor_v2\"";
  }];
  string version = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Version identifier for the model.";
    example: "\"2.0.0\"";
  }];
  string description = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Description of the model's purpose or characteristics.";
    example: "\"Improved WQI prediction model.\"";
  }];
  google.protobuf.Timestamp trained_at = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp when the model was trained.";
    example: "\"2024-01-20T10:00:00Z\"";
  }];
  string station_id = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Identifier (UUID) of the station this model is associated with (if applicable).";
    example: "\"c3d4e5f6-a7b8-9012-3456-7890abcdef01\"";
  }];
  bool availability = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Indicates if the model should be available for use upon creation/update.";
    example: "true";
  }];
}

message CreateModelsRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Create Models Request";
      description: "Request to create one or more new AI model metadata records.";
      required: ["models"];
    }
  };
  repeated ModelInput models = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "List of model metadata details to create.";
  }];
}

message CreateModelsResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Create Models Response";
      description: "Contains details of the newly created AI model metadata records.";
    }
  };
  repeated Model models = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "List of created model metadata records with system-generated fields populated.";
  }];
}

message UpdateModelsRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Update Models Request";
      description: "Request to update one or more existing AI model metadata records.";
      required: ["models"];
    }
  };
  repeated Model models = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "List of model metadata with updated fields. Each must include the model ID.";
  }];
}

message UpdateModelsResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Update Models Response";
      description: "Contains details of the updated AI model metadata records.";
    }
  };
  repeated Model models = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "List of updated model metadata records.";
  }];
}

message DeleteModelsRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Delete Models Request";
      description: "Request to delete one or more AI model metadata records by their IDs.";
      required: ["ids"];
    }
  };
  repeated string ids = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "List of model metadata UUIDs to delete.";
    example: "[\"a1b2c3d4-e5f6-7890-1234-567890abcdef\", \"b2c3d4e5-f6a7-8901-2345-67890abcdef0\"]";
  }];
  bool hard_delete = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "If true, performs a permanent (hard) delete. If false or omitted, performs a soft delete. Note: Does not delete the associated model file from storage.";
    default: "false";
    example: "false";
  }];
}

message DeleteModelsResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Delete Models Response";
      description: "Contains information about the deletion operation.";
      required: ["affected_count"];
    }
  };
  int64 affected_count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Number of model metadata records that were successfully deleted.";
    example: "2";
  }];
}

message ListModelsRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "List Models Request";
      description: "Request to list AI model metadata records with filtering and pagination options.";
    }
  };
  core.FilterOptions options = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Filtering, pagination, and sorting options.";
  }];
}

message ListModelsResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "List Models Response";
      description: "Contains a paginated list of AI model metadata records.";
      required: ["models", "pagination"];
    }
  };
  repeated Model models = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "List of model metadata records matching the filter criteria.";
  }];
  core.PaginationInfo pagination = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Pagination information including total count and current page.";
  }];
}

message ListModelsByStationRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "List Models By Station Request";
      description: "Request to list AI model metadata records for a specific station with filtering and pagination.";
      required: ["station_id"];
    }
  };
  string station_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "UUID of the station to list model metadata for.";
    example: "\"b2c3d4e5-f6a7-8901-2345-67890abcdef0\"";
  }];
  core.FilterOptions options = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Filtering, pagination, and sorting options.";
  }];
}

message ListModelsByStationResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "List Models By Station Response";
      description: "Contains a paginated list of AI model metadata records for a specific station.";
      required: ["models", "pagination"];
    }
  };
  repeated Model models = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "List of model metadata records matching the filter criteria.";
  }];
  core.PaginationInfo pagination = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Pagination information including total count and current page.";
  }];
}

message FindModelByNameRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Find Model By Name Request";
      description: "Request to find a specific AI model metadata record by its unique name.";
      required: ["name"];
    }
  };
  string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The unique name of the model to find.";
    example: "\"WaterQualityPredictor_v1\"";
  }];
}

message FindModelByNameResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Find Model By Name Response";
      description: "Contains the details of the found AI model metadata record.";
    }
  };
  Model model = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The model metadata record matching the provided name.";
  }];
}

// --- Service Definition ---

service ModelService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Operations related to managing AI model metadata";
  };

  rpc CreateModels(CreateModelsRequest) returns (CreateModelsResponse) {
    option (google.api.http) = {
      post: "/api/v1/models";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Model Metadata Records";
      description: "Creates one or more new AI model metadata records. The associated model file must be uploaded separately.";
      tags: ["Models"];
    };
  }

  rpc UpdateModels(UpdateModelsRequest) returns (UpdateModelsResponse) {
    option (google.api.http) = {
      put: "/api/v1/models";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Model Metadata Records";
      description: "Updates metadata for one or more existing AI models. Does not affect the model file.";
      tags: ["Models"];
    };
  }

  rpc DeleteModels(DeleteModelsRequest) returns (DeleteModelsResponse) {
    option (google.api.http) = {
      post: "/api/v1/models/delete";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Model Metadata Records";
      description: "Deletes one or more AI model metadata records. Can be soft or hard delete. Does not delete the associated model file from storage.";
      tags: ["Models"];
    };
  }

  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {
    option (google.api.http) = {
      get: "/api/v1/models";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Model Metadata Records";
      description: "Retrieves a paginated list of AI model metadata records with filtering options.";
      tags: ["Models"];
    };
  }

  rpc ListModelsByStation(ListModelsByStationRequest) returns (ListModelsByStationResponse) {
    option (google.api.http) = {
      get: "/api/v1/stations/{station_id}/models";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Model Metadata by Station";
      description: "Retrieves a paginated list of AI model metadata records associated with a specific station.";
      tags: ["Models"];
    };
  }

  rpc FindModelByName(FindModelByNameRequest) returns (FindModelByNameResponse) {
    option (google.api.http) = {
      get: "/api/v1/models/by-name/{name}";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Find Model Metadata by Name";
      description: "Retrieves an AI model metadata record by its unique name.";
      tags: ["Models"];
    };
  }
}
