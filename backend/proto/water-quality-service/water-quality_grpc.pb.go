// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/water-quality-service/water-quality.proto

package waterquality

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WaterQualityService_CreateStations_FullMethodName              = "/waterquality.WaterQualityService/CreateStations"
	WaterQualityService_UpdateStations_FullMethodName              = "/waterquality.WaterQualityService/UpdateStations"
	WaterQualityService_DeleteStations_FullMethodName              = "/waterquality.WaterQualityService/DeleteStations"
	WaterQualityService_ListStations_FullMethodName                = "/waterquality.WaterQualityService/ListStations"
	WaterQualityService_CreateDataPoints_FullMethodName            = "/waterquality.WaterQualityService/CreateDataPoints"
	WaterQualityService_UpdateDataPoints_FullMethodName            = "/waterquality.WaterQualityService/UpdateDataPoints"
	WaterQualityService_DeleteDataPoints_FullMethodName            = "/waterquality.WaterQualityService/DeleteDataPoints"
	WaterQualityService_ListDataPointsByStation_FullMethodName     = "/waterquality.WaterQualityService/ListDataPointsByStation"
	WaterQualityService_ListDataPointsByStationPost_FullMethodName = "/waterquality.WaterQualityService/ListDataPointsByStationPost"
	WaterQualityService_ListAllDataPoints_FullMethodName           = "/waterquality.WaterQualityService/ListAllDataPoints"
	WaterQualityService_UploadData_FullMethodName                  = "/waterquality.WaterQualityService/UploadData"
	WaterQualityService_CreateDataSourceSchema_FullMethodName      = "/waterquality.WaterQualityService/CreateDataSourceSchema"
	WaterQualityService_UpdateDataSourceSchema_FullMethodName      = "/waterquality.WaterQualityService/UpdateDataSourceSchema"
	WaterQualityService_GetDataSourceSchema_FullMethodName         = "/waterquality.WaterQualityService/GetDataSourceSchema"
	WaterQualityService_ListDataSourceSchemas_FullMethodName       = "/waterquality.WaterQualityService/ListDataSourceSchemas"
	WaterQualityService_CreateThresholdConfigs_FullMethodName      = "/waterquality.WaterQualityService/CreateThresholdConfigs"
	WaterQualityService_UpdateThresholdConfigs_FullMethodName      = "/waterquality.WaterQualityService/UpdateThresholdConfigs"
	WaterQualityService_DeleteThresholdConfigs_FullMethodName      = "/waterquality.WaterQualityService/DeleteThresholdConfigs"
	WaterQualityService_ListThresholdConfigs_FullMethodName        = "/waterquality.WaterQualityService/ListThresholdConfigs"
)

// WaterQualityServiceClient is the client API for WaterQualityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaterQualityServiceClient interface {
	// Station RPCs
	CreateStations(ctx context.Context, in *CreateStationsRequest, opts ...grpc.CallOption) (*CreateStationsResponse, error)
	UpdateStations(ctx context.Context, in *UpdateStationsRequest, opts ...grpc.CallOption) (*UpdateStationsResponse, error)
	DeleteStations(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListStations(ctx context.Context, in *ListStationsRequest, opts ...grpc.CallOption) (*ListStationsResponse, error)
	// DataPoint RPCs
	CreateDataPoints(ctx context.Context, in *CreateDataPointsRequest, opts ...grpc.CallOption) (*CreateDataPointsResponse, error)
	UpdateDataPoints(ctx context.Context, in *UpdateDataPointsRequest, opts ...grpc.CallOption) (*UpdateDataPointsResponse, error)
	DeleteDataPoints(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListDataPointsByStation(ctx context.Context, in *ListDataPointsByStationRequest, opts ...grpc.CallOption) (*ListDataPointsByStationResponse, error)
	ListDataPointsByStationPost(ctx context.Context, in *ListDataPointsByStationRequest, opts ...grpc.CallOption) (*ListDataPointsByStationResponse, error)
	// --- Add ListAllDataPoints RPC ---
	ListAllDataPoints(ctx context.Context, in *ListAllDataPointsRequest, opts ...grpc.CallOption) (*ListAllDataPointsResponse, error)
	// File Upload RPC - Changed to Unary
	UploadData(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadDataResponse, error)
	// DataSourceSchema RPCs
	CreateDataSourceSchema(ctx context.Context, in *CreateDataSourceSchemaRequest, opts ...grpc.CallOption) (*CreateDataSourceSchemaResponse, error)
	UpdateDataSourceSchema(ctx context.Context, in *UpdateDataSourceSchemaRequest, opts ...grpc.CallOption) (*UpdateDataSourceSchemaResponse, error)
	GetDataSourceSchema(ctx context.Context, in *GetDataSourceSchemaRequest, opts ...grpc.CallOption) (*GetDataSourceSchemaResponse, error)
	ListDataSourceSchemas(ctx context.Context, in *ListDataSourceSchemasRequest, opts ...grpc.CallOption) (*ListDataSourceSchemasResponse, error)
	// ThresholdConfig RPCs
	CreateThresholdConfigs(ctx context.Context, in *CreateThresholdConfigsRequest, opts ...grpc.CallOption) (*CreateThresholdConfigsResponse, error)
	UpdateThresholdConfigs(ctx context.Context, in *UpdateThresholdConfigsRequest, opts ...grpc.CallOption) (*UpdateThresholdConfigsResponse, error)
	DeleteThresholdConfigs(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListThresholdConfigs(ctx context.Context, in *ListThresholdConfigsRequest, opts ...grpc.CallOption) (*ListThresholdConfigsResponse, error)
}

type waterQualityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWaterQualityServiceClient(cc grpc.ClientConnInterface) WaterQualityServiceClient {
	return &waterQualityServiceClient{cc}
}

func (c *waterQualityServiceClient) CreateStations(ctx context.Context, in *CreateStationsRequest, opts ...grpc.CallOption) (*CreateStationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStationsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_CreateStations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) UpdateStations(ctx context.Context, in *UpdateStationsRequest, opts ...grpc.CallOption) (*UpdateStationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStationsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_UpdateStations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) DeleteStations(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_DeleteStations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) ListStations(ctx context.Context, in *ListStationsRequest, opts ...grpc.CallOption) (*ListStationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStationsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_ListStations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) CreateDataPoints(ctx context.Context, in *CreateDataPointsRequest, opts ...grpc.CallOption) (*CreateDataPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDataPointsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_CreateDataPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) UpdateDataPoints(ctx context.Context, in *UpdateDataPointsRequest, opts ...grpc.CallOption) (*UpdateDataPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDataPointsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_UpdateDataPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) DeleteDataPoints(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_DeleteDataPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) ListDataPointsByStation(ctx context.Context, in *ListDataPointsByStationRequest, opts ...grpc.CallOption) (*ListDataPointsByStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataPointsByStationResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_ListDataPointsByStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) ListDataPointsByStationPost(ctx context.Context, in *ListDataPointsByStationRequest, opts ...grpc.CallOption) (*ListDataPointsByStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataPointsByStationResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_ListDataPointsByStationPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) ListAllDataPoints(ctx context.Context, in *ListAllDataPointsRequest, opts ...grpc.CallOption) (*ListAllDataPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllDataPointsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_ListAllDataPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) UploadData(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDataResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_UploadData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) CreateDataSourceSchema(ctx context.Context, in *CreateDataSourceSchemaRequest, opts ...grpc.CallOption) (*CreateDataSourceSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDataSourceSchemaResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_CreateDataSourceSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) UpdateDataSourceSchema(ctx context.Context, in *UpdateDataSourceSchemaRequest, opts ...grpc.CallOption) (*UpdateDataSourceSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDataSourceSchemaResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_UpdateDataSourceSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) GetDataSourceSchema(ctx context.Context, in *GetDataSourceSchemaRequest, opts ...grpc.CallOption) (*GetDataSourceSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataSourceSchemaResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_GetDataSourceSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) ListDataSourceSchemas(ctx context.Context, in *ListDataSourceSchemasRequest, opts ...grpc.CallOption) (*ListDataSourceSchemasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataSourceSchemasResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_ListDataSourceSchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) CreateThresholdConfigs(ctx context.Context, in *CreateThresholdConfigsRequest, opts ...grpc.CallOption) (*CreateThresholdConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateThresholdConfigsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_CreateThresholdConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) UpdateThresholdConfigs(ctx context.Context, in *UpdateThresholdConfigsRequest, opts ...grpc.CallOption) (*UpdateThresholdConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateThresholdConfigsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_UpdateThresholdConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) DeleteThresholdConfigs(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_DeleteThresholdConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) ListThresholdConfigs(ctx context.Context, in *ListThresholdConfigsRequest, opts ...grpc.CallOption) (*ListThresholdConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListThresholdConfigsResponse)
	err := c.cc.Invoke(ctx, WaterQualityService_ListThresholdConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaterQualityServiceServer is the server API for WaterQualityService service.
// All implementations must embed UnimplementedWaterQualityServiceServer
// for forward compatibility.
type WaterQualityServiceServer interface {
	// Station RPCs
	CreateStations(context.Context, *CreateStationsRequest) (*CreateStationsResponse, error)
	UpdateStations(context.Context, *UpdateStationsRequest) (*UpdateStationsResponse, error)
	DeleteStations(context.Context, *DeleteRequest) (*DeleteResponse, error)
	ListStations(context.Context, *ListStationsRequest) (*ListStationsResponse, error)
	// DataPoint RPCs
	CreateDataPoints(context.Context, *CreateDataPointsRequest) (*CreateDataPointsResponse, error)
	UpdateDataPoints(context.Context, *UpdateDataPointsRequest) (*UpdateDataPointsResponse, error)
	DeleteDataPoints(context.Context, *DeleteRequest) (*DeleteResponse, error)
	ListDataPointsByStation(context.Context, *ListDataPointsByStationRequest) (*ListDataPointsByStationResponse, error)
	ListDataPointsByStationPost(context.Context, *ListDataPointsByStationRequest) (*ListDataPointsByStationResponse, error)
	// --- Add ListAllDataPoints RPC ---
	ListAllDataPoints(context.Context, *ListAllDataPointsRequest) (*ListAllDataPointsResponse, error)
	// File Upload RPC - Changed to Unary
	UploadData(context.Context, *UploadRequest) (*UploadDataResponse, error)
	// DataSourceSchema RPCs
	CreateDataSourceSchema(context.Context, *CreateDataSourceSchemaRequest) (*CreateDataSourceSchemaResponse, error)
	UpdateDataSourceSchema(context.Context, *UpdateDataSourceSchemaRequest) (*UpdateDataSourceSchemaResponse, error)
	GetDataSourceSchema(context.Context, *GetDataSourceSchemaRequest) (*GetDataSourceSchemaResponse, error)
	ListDataSourceSchemas(context.Context, *ListDataSourceSchemasRequest) (*ListDataSourceSchemasResponse, error)
	// ThresholdConfig RPCs
	CreateThresholdConfigs(context.Context, *CreateThresholdConfigsRequest) (*CreateThresholdConfigsResponse, error)
	UpdateThresholdConfigs(context.Context, *UpdateThresholdConfigsRequest) (*UpdateThresholdConfigsResponse, error)
	DeleteThresholdConfigs(context.Context, *DeleteRequest) (*DeleteResponse, error)
	ListThresholdConfigs(context.Context, *ListThresholdConfigsRequest) (*ListThresholdConfigsResponse, error)
	mustEmbedUnimplementedWaterQualityServiceServer()
}

// UnimplementedWaterQualityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWaterQualityServiceServer struct{}

func (UnimplementedWaterQualityServiceServer) CreateStations(context.Context, *CreateStationsRequest) (*CreateStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStations not implemented")
}
func (UnimplementedWaterQualityServiceServer) UpdateStations(context.Context, *UpdateStationsRequest) (*UpdateStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStations not implemented")
}
func (UnimplementedWaterQualityServiceServer) DeleteStations(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStations not implemented")
}
func (UnimplementedWaterQualityServiceServer) ListStations(context.Context, *ListStationsRequest) (*ListStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStations not implemented")
}
func (UnimplementedWaterQualityServiceServer) CreateDataPoints(context.Context, *CreateDataPointsRequest) (*CreateDataPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataPoints not implemented")
}
func (UnimplementedWaterQualityServiceServer) UpdateDataPoints(context.Context, *UpdateDataPointsRequest) (*UpdateDataPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataPoints not implemented")
}
func (UnimplementedWaterQualityServiceServer) DeleteDataPoints(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataPoints not implemented")
}
func (UnimplementedWaterQualityServiceServer) ListDataPointsByStation(context.Context, *ListDataPointsByStationRequest) (*ListDataPointsByStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataPointsByStation not implemented")
}
func (UnimplementedWaterQualityServiceServer) ListDataPointsByStationPost(context.Context, *ListDataPointsByStationRequest) (*ListDataPointsByStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataPointsByStationPost not implemented")
}
func (UnimplementedWaterQualityServiceServer) ListAllDataPoints(context.Context, *ListAllDataPointsRequest) (*ListAllDataPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllDataPoints not implemented")
}
func (UnimplementedWaterQualityServiceServer) UploadData(context.Context, *UploadRequest) (*UploadDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadData not implemented")
}
func (UnimplementedWaterQualityServiceServer) CreateDataSourceSchema(context.Context, *CreateDataSourceSchemaRequest) (*CreateDataSourceSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataSourceSchema not implemented")
}
func (UnimplementedWaterQualityServiceServer) UpdateDataSourceSchema(context.Context, *UpdateDataSourceSchemaRequest) (*UpdateDataSourceSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataSourceSchema not implemented")
}
func (UnimplementedWaterQualityServiceServer) GetDataSourceSchema(context.Context, *GetDataSourceSchemaRequest) (*GetDataSourceSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceSchema not implemented")
}
func (UnimplementedWaterQualityServiceServer) ListDataSourceSchemas(context.Context, *ListDataSourceSchemasRequest) (*ListDataSourceSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSourceSchemas not implemented")
}
func (UnimplementedWaterQualityServiceServer) CreateThresholdConfigs(context.Context, *CreateThresholdConfigsRequest) (*CreateThresholdConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThresholdConfigs not implemented")
}
func (UnimplementedWaterQualityServiceServer) UpdateThresholdConfigs(context.Context, *UpdateThresholdConfigsRequest) (*UpdateThresholdConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThresholdConfigs not implemented")
}
func (UnimplementedWaterQualityServiceServer) DeleteThresholdConfigs(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThresholdConfigs not implemented")
}
func (UnimplementedWaterQualityServiceServer) ListThresholdConfigs(context.Context, *ListThresholdConfigsRequest) (*ListThresholdConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThresholdConfigs not implemented")
}
func (UnimplementedWaterQualityServiceServer) mustEmbedUnimplementedWaterQualityServiceServer() {}
func (UnimplementedWaterQualityServiceServer) testEmbeddedByValue()                             {}

// UnsafeWaterQualityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaterQualityServiceServer will
// result in compilation errors.
type UnsafeWaterQualityServiceServer interface {
	mustEmbedUnimplementedWaterQualityServiceServer()
}

func RegisterWaterQualityServiceServer(s grpc.ServiceRegistrar, srv WaterQualityServiceServer) {
	// If the following call pancis, it indicates UnimplementedWaterQualityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WaterQualityService_ServiceDesc, srv)
}

func _WaterQualityService_CreateStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).CreateStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_CreateStations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).CreateStations(ctx, req.(*CreateStationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_UpdateStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).UpdateStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_UpdateStations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).UpdateStations(ctx, req.(*UpdateStationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_DeleteStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).DeleteStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_DeleteStations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).DeleteStations(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_ListStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).ListStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_ListStations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).ListStations(ctx, req.(*ListStationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_CreateDataPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).CreateDataPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_CreateDataPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).CreateDataPoints(ctx, req.(*CreateDataPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_UpdateDataPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).UpdateDataPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_UpdateDataPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).UpdateDataPoints(ctx, req.(*UpdateDataPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_DeleteDataPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).DeleteDataPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_DeleteDataPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).DeleteDataPoints(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_ListDataPointsByStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataPointsByStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).ListDataPointsByStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_ListDataPointsByStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).ListDataPointsByStation(ctx, req.(*ListDataPointsByStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_ListDataPointsByStationPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataPointsByStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).ListDataPointsByStationPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_ListDataPointsByStationPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).ListDataPointsByStationPost(ctx, req.(*ListDataPointsByStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_ListAllDataPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllDataPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).ListAllDataPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_ListAllDataPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).ListAllDataPoints(ctx, req.(*ListAllDataPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_UploadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).UploadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_UploadData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).UploadData(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_CreateDataSourceSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataSourceSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).CreateDataSourceSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_CreateDataSourceSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).CreateDataSourceSchema(ctx, req.(*CreateDataSourceSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_UpdateDataSourceSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataSourceSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).UpdateDataSourceSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_UpdateDataSourceSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).UpdateDataSourceSchema(ctx, req.(*UpdateDataSourceSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_GetDataSourceSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSourceSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).GetDataSourceSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_GetDataSourceSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).GetDataSourceSchema(ctx, req.(*GetDataSourceSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_ListDataSourceSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataSourceSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).ListDataSourceSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_ListDataSourceSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).ListDataSourceSchemas(ctx, req.(*ListDataSourceSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_CreateThresholdConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThresholdConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).CreateThresholdConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_CreateThresholdConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).CreateThresholdConfigs(ctx, req.(*CreateThresholdConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_UpdateThresholdConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThresholdConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).UpdateThresholdConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_UpdateThresholdConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).UpdateThresholdConfigs(ctx, req.(*UpdateThresholdConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_DeleteThresholdConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).DeleteThresholdConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_DeleteThresholdConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).DeleteThresholdConfigs(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_ListThresholdConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThresholdConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).ListThresholdConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_ListThresholdConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).ListThresholdConfigs(ctx, req.(*ListThresholdConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WaterQualityService_ServiceDesc is the grpc.ServiceDesc for WaterQualityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaterQualityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waterquality.WaterQualityService",
	HandlerType: (*WaterQualityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStations",
			Handler:    _WaterQualityService_CreateStations_Handler,
		},
		{
			MethodName: "UpdateStations",
			Handler:    _WaterQualityService_UpdateStations_Handler,
		},
		{
			MethodName: "DeleteStations",
			Handler:    _WaterQualityService_DeleteStations_Handler,
		},
		{
			MethodName: "ListStations",
			Handler:    _WaterQualityService_ListStations_Handler,
		},
		{
			MethodName: "CreateDataPoints",
			Handler:    _WaterQualityService_CreateDataPoints_Handler,
		},
		{
			MethodName: "UpdateDataPoints",
			Handler:    _WaterQualityService_UpdateDataPoints_Handler,
		},
		{
			MethodName: "DeleteDataPoints",
			Handler:    _WaterQualityService_DeleteDataPoints_Handler,
		},
		{
			MethodName: "ListDataPointsByStation",
			Handler:    _WaterQualityService_ListDataPointsByStation_Handler,
		},
		{
			MethodName: "ListDataPointsByStationPost",
			Handler:    _WaterQualityService_ListDataPointsByStationPost_Handler,
		},
		{
			MethodName: "ListAllDataPoints",
			Handler:    _WaterQualityService_ListAllDataPoints_Handler,
		},
		{
			MethodName: "UploadData",
			Handler:    _WaterQualityService_UploadData_Handler,
		},
		{
			MethodName: "CreateDataSourceSchema",
			Handler:    _WaterQualityService_CreateDataSourceSchema_Handler,
		},
		{
			MethodName: "UpdateDataSourceSchema",
			Handler:    _WaterQualityService_UpdateDataSourceSchema_Handler,
		},
		{
			MethodName: "GetDataSourceSchema",
			Handler:    _WaterQualityService_GetDataSourceSchema_Handler,
		},
		{
			MethodName: "ListDataSourceSchemas",
			Handler:    _WaterQualityService_ListDataSourceSchemas_Handler,
		},
		{
			MethodName: "CreateThresholdConfigs",
			Handler:    _WaterQualityService_CreateThresholdConfigs_Handler,
		},
		{
			MethodName: "UpdateThresholdConfigs",
			Handler:    _WaterQualityService_UpdateThresholdConfigs_Handler,
		},
		{
			MethodName: "DeleteThresholdConfigs",
			Handler:    _WaterQualityService_DeleteThresholdConfigs_Handler,
		},
		{
			MethodName: "ListThresholdConfigs",
			Handler:    _WaterQualityService_ListThresholdConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/water-quality-service/water-quality.proto",
}
