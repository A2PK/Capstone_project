syntax = "proto3";

package userservice;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto"; // For optional fields in updates
import "proto/core/common.proto"; // Import common definitions - Ensure this path is correct
import "google/api/annotations.proto"; // HTTP annotations
import "protoc-gen-openapiv2/options/annotations.proto"; // OpenAPI annotations
// Assuming FileIDsUpdate is correctly defined and has correct examples in article.proto
import "proto/user-service/article.proto";

option go_package = "golang-microservices-boilerplate/proto/user-service";

// --- OpenAPI Info ---
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Request Service API";
    version: "1.0";
    description: "API for managing requests (e.g., leave requests, document requests).";
  };
  schemes: [HTTP, HTTPS];
  consumes: ["application/json"];
  produces: ["application/json"];
  security_definitions: {
    security: {
      key: "BearerAuth"; // Matches user.proto
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "JWT Bearer token (e.g., 'Bearer ey...')";
      }
    }
  };
  security: {
    security_requirement: {
      key: "BearerAuth";
      value: {};
    }
  }
};

// --- Request Message ---
message Request {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Request";
      description: "Represents a request entity between users.";
      required: ["id", "created_at", "updated_at", "title", "sender_id", "receiver_id", "status"];
    }
  };

  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique identifier (UUID).", example: "\"request-uuid-string\""}];
  google.protobuf.Timestamp created_at = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Creation timestamp.", example: "\"2023-10-27T10:00:00Z\""}];
  google.protobuf.Timestamp updated_at = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Last update timestamp.", example: "\"2023-10-27T11:30:00Z\""}];
  optional google.protobuf.Timestamp deleted_at = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Deletion timestamp (if soft-deleted).", example: "\"2023-10-28T09:15:00Z\""}];
  string title = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Request title.", example: "\"Leave Request - Dec 2023\""}];
  string sender_id = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Sender's user ID (UUID).", example: "\"sender-uuid-string\""}];
  string receiver_id = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Receiver's user ID (UUID).", example: "\"receiver-uuid-string\""}];
  string status = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Current status of the request (e.g., 'pending', 'approved', 'rejected').", example: "\"pending\""}];
  repeated string file_ids = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of associated file IDs (UUIDs).", example: "[\"file-uuid-1\", \"file-uuid-2\"]"}]; // Corrected repeated string example
  string description = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Optional description for the request.", example: "\"Requesting leave for family event.\""}]; // Added description field
}

// --- Request/Response Messages ---

// Create
message CreateRequestRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Create Request Request", required: ["title", "sender_id", "receiver_id", "status"] } };
  string title = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Request title.", example: "\"Document Approval Request\""}];
  string sender_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Sender's user ID (UUID).", example: "\"sender-uuid-string\""}];
  string receiver_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Receiver's user ID (UUID).", example: "\"receiver-uuid-string\""}];
  string status = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Initial status (e.g., 'pending').", example: "\"pending\""}];
  repeated string file_ids = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of associated file IDs (UUIDs, optional).", example: "[\"file-uuid-1\"]"}]; // Corrected repeated string example
  string description = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Optional description for the request.", example: "\"Please review the attached proposal.\""}]; // Added optional description field
}
message CreateRequestResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Create Request Response" } };
  Request request = 1;
}

// Get By ID
message GetRequestByIDRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Get Request By ID Request", required: ["id"] } };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "UUID of the request to retrieve.", example: "\"request-uuid-string\""}];
}
message GetRequestByIDResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Get Request By ID Response" } };
  Request request = 1;
}

// List (Standard)
message ListRequestsRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "List Requests Request" } };
  core.FilterOptions options = 1;
}
message ListRequestsResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "List Requests Response" } };
  repeated Request requests = 1;
  core.PaginationInfo pagination_info = 2;
}

// Update
message UpdateRequestRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Update Request Request", required: ["id"] } };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "UUID of the request to update.", example: "\"request-uuid-string\""}];
  optional google.protobuf.StringValue title = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "New title.", example: "\"Updated Request Title\""}];
  // sender_id and receiver_id typically shouldn't be updated
  optional google.protobuf.StringValue status = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "New status (e.g., 'approved', 'rejected').", example: "\"approved\""}];
  // Use the FileIDsUpdate message (defined above or imported)
  optional FileIDsUpdate file_ids = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Replace associated file IDs."}];
  optional google.protobuf.StringValue description = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "New optional description.", example: "\"Adding further details.\""}]; // Added optional description field
}

message UpdateRequestResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Update Request Response" } };
  Request request = 1;
}

// Delete
message DeleteRequestRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Delete Request Request", required: ["id"] } };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "UUID of the request to delete.", example: "\"request-uuid-string\""}];
  bool hard_delete = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Perform hard delete if true.", default: "false", example: "false"}]; // Corrected boolean example
}
// Response is google.protobuf.Empty

// Find By User Participant
message FindByUserParticipantRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Find By User Participant Request", required: ["user_id"] } };
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "User ID (UUID) of the participant (sender or receiver).", example: "\"user-uuid-string\""}];
  // Optional filter for status (maps to query parameter ?status=pending etc.)
  optional string status = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Filter by status (optional).", example: "\"pending\""}];
  core.FilterOptions options = 3; // For pagination/sorting
}
message FindByUserParticipantResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = { json_schema: { title: "Find By User Participant Response" } };
  repeated Request requests = 1;
  core.PaginationInfo pagination_info = 2;
}


// --- Request Service ---
service RequestService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Operations related to user requests"
  };

  // Create
  rpc Create(CreateRequestRequest) returns (CreateRequestResponse) {
    option (google.api.http) = { post: "/api/v1/requests", body: "*" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { summary: "Create Request", tags: ["Requests"] };
  }

  // Get By ID
  rpc GetByID(GetRequestByIDRequest) returns (GetRequestByIDResponse) {
    option (google.api.http) = { get: "/api/v1/requests/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { summary: "Get Request By ID", tags: ["Requests"] };
  }

  // List (Standard)
  rpc List(ListRequestsRequest) returns (ListRequestsResponse) {
    option (google.api.http) = { get: "/api/v1/requests" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { summary: "List Requests", tags: ["Requests"] };
  }

  // Update
  rpc Update(UpdateRequestRequest) returns (UpdateRequestResponse) {
    option (google.api.http) = { patch: "/api/v1/requests/{id}", body: "*" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { summary: "Update Request", tags: ["Requests"] };
  }

  // Delete
  rpc Delete(DeleteRequestRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/api/v1/requests/{id}" }; // hard_delete as query param: ?hard_delete=true
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { summary: "Delete Request", tags: ["Requests"] };
  }

  // Find By User Participant (Using GET with user ID in path, status and options map to query)
  rpc FindByUserParticipant(FindByUserParticipantRequest) returns (FindByUserParticipantResponse) {
    option (google.api.http) = { get: "/api/v1/users/{user_id}/requests" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { summary: "Find Requests By User Participant", tags: ["Requests", "Users"] };
  }

} // End of Service definition