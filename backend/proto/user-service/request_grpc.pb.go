// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/user-service/request.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RequestService_Create_FullMethodName                = "/userservice.RequestService/Create"
	RequestService_GetByID_FullMethodName               = "/userservice.RequestService/GetByID"
	RequestService_List_FullMethodName                  = "/userservice.RequestService/List"
	RequestService_Update_FullMethodName                = "/userservice.RequestService/Update"
	RequestService_Delete_FullMethodName                = "/userservice.RequestService/Delete"
	RequestService_FindByUserParticipant_FullMethodName = "/userservice.RequestService/FindByUserParticipant"
)

// RequestServiceClient is the client API for RequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Request Service ---
type RequestServiceClient interface {
	// Create
	Create(ctx context.Context, in *CreateRequestRequest, opts ...grpc.CallOption) (*CreateRequestResponse, error)
	// Get By ID
	GetByID(ctx context.Context, in *GetRequestByIDRequest, opts ...grpc.CallOption) (*GetRequestByIDResponse, error)
	// List (Standard)
	List(ctx context.Context, in *ListRequestsRequest, opts ...grpc.CallOption) (*ListRequestsResponse, error)
	// Update
	Update(ctx context.Context, in *UpdateRequestRequest, opts ...grpc.CallOption) (*UpdateRequestResponse, error)
	// Delete
	Delete(ctx context.Context, in *DeleteRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Find By User Participant (Using GET with user ID in path, status and options map to query)
	FindByUserParticipant(ctx context.Context, in *FindByUserParticipantRequest, opts ...grpc.CallOption) (*FindByUserParticipantResponse, error)
}

type requestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestServiceClient(cc grpc.ClientConnInterface) RequestServiceClient {
	return &requestServiceClient{cc}
}

func (c *requestServiceClient) Create(ctx context.Context, in *CreateRequestRequest, opts ...grpc.CallOption) (*CreateRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRequestResponse)
	err := c.cc.Invoke(ctx, RequestService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) GetByID(ctx context.Context, in *GetRequestByIDRequest, opts ...grpc.CallOption) (*GetRequestByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRequestByIDResponse)
	err := c.cc.Invoke(ctx, RequestService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) List(ctx context.Context, in *ListRequestsRequest, opts ...grpc.CallOption) (*ListRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRequestsResponse)
	err := c.cc.Invoke(ctx, RequestService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) Update(ctx context.Context, in *UpdateRequestRequest, opts ...grpc.CallOption) (*UpdateRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRequestResponse)
	err := c.cc.Invoke(ctx, RequestService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) Delete(ctx context.Context, in *DeleteRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RequestService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) FindByUserParticipant(ctx context.Context, in *FindByUserParticipantRequest, opts ...grpc.CallOption) (*FindByUserParticipantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByUserParticipantResponse)
	err := c.cc.Invoke(ctx, RequestService_FindByUserParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestServiceServer is the server API for RequestService service.
// All implementations must embed UnimplementedRequestServiceServer
// for forward compatibility.
//
// --- Request Service ---
type RequestServiceServer interface {
	// Create
	Create(context.Context, *CreateRequestRequest) (*CreateRequestResponse, error)
	// Get By ID
	GetByID(context.Context, *GetRequestByIDRequest) (*GetRequestByIDResponse, error)
	// List (Standard)
	List(context.Context, *ListRequestsRequest) (*ListRequestsResponse, error)
	// Update
	Update(context.Context, *UpdateRequestRequest) (*UpdateRequestResponse, error)
	// Delete
	Delete(context.Context, *DeleteRequestRequest) (*emptypb.Empty, error)
	// Find By User Participant (Using GET with user ID in path, status and options map to query)
	FindByUserParticipant(context.Context, *FindByUserParticipantRequest) (*FindByUserParticipantResponse, error)
	mustEmbedUnimplementedRequestServiceServer()
}

// UnimplementedRequestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRequestServiceServer struct{}

func (UnimplementedRequestServiceServer) Create(context.Context, *CreateRequestRequest) (*CreateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRequestServiceServer) GetByID(context.Context, *GetRequestByIDRequest) (*GetRequestByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedRequestServiceServer) List(context.Context, *ListRequestsRequest) (*ListRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRequestServiceServer) Update(context.Context, *UpdateRequestRequest) (*UpdateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRequestServiceServer) Delete(context.Context, *DeleteRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRequestServiceServer) FindByUserParticipant(context.Context, *FindByUserParticipantRequest) (*FindByUserParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserParticipant not implemented")
}
func (UnimplementedRequestServiceServer) mustEmbedUnimplementedRequestServiceServer() {}
func (UnimplementedRequestServiceServer) testEmbeddedByValue()                        {}

// UnsafeRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestServiceServer will
// result in compilation errors.
type UnsafeRequestServiceServer interface {
	mustEmbedUnimplementedRequestServiceServer()
}

func RegisterRequestServiceServer(s grpc.ServiceRegistrar, srv RequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RequestService_ServiceDesc, srv)
}

func _RequestService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).Create(ctx, req.(*CreateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).GetByID(ctx, req.(*GetRequestByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).List(ctx, req.(*ListRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).Update(ctx, req.(*UpdateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).Delete(ctx, req.(*DeleteRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_FindByUserParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUserParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).FindByUserParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestService_FindByUserParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).FindByUserParticipant(ctx, req.(*FindByUserParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestService_ServiceDesc is the grpc.ServiceDesc for RequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userservice.RequestService",
	HandlerType: (*RequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RequestService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _RequestService_GetByID_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RequestService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RequestService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RequestService_Delete_Handler,
		},
		{
			MethodName: "FindByUserParticipant",
			Handler:    _RequestService_FindByUserParticipant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user-service/request.proto",
}
