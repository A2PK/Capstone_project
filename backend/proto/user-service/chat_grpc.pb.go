// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/user-service/chat.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DirectMessageService_SendMessage_FullMethodName               = "/userservice.DirectMessageService/SendMessage"
	DirectMessageService_ListMessagesBetweenUsers_FullMethodName  = "/userservice.DirectMessageService/ListMessagesBetweenUsers"
	DirectMessageService_ListUnseenMessagesForUser_FullMethodName = "/userservice.DirectMessageService/ListUnseenMessagesForUser"
	DirectMessageService_MarkMessagesAsRead_FullMethodName        = "/userservice.DirectMessageService/MarkMessagesAsRead"
)

// DirectMessageServiceClient is the client API for DirectMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Direct Message Service ---
type DirectMessageServiceClient interface {
	// Send Message
	// POST /api/v1/messages (Receiver specified in body)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// List Messages Between Users
	// GET /api/v1/messages/conversation?userId1=...&userId2=...
	// Requires explicit user IDs as path params might conflict if based on auth user
	ListMessagesBetweenUsers(ctx context.Context, in *ListMessagesBetweenUsersRequest, opts ...grpc.CallOption) (*ListMessagesBetweenUsersResponse, error)
	// List Unseen Messages For User (Current authenticated user)
	// GET /api/v1/messages/unseen
	ListUnseenMessagesForUser(ctx context.Context, in *ListUnseenMessagesForUserRequest, opts ...grpc.CallOption) (*ListUnseenMessagesForUserResponse, error)
	// Mark Messages As Read (Current authenticated user marks messages sent to them)
	// POST /api/v1/messages/read
	MarkMessagesAsRead(ctx context.Context, in *MarkMessagesAsReadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type directMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectMessageServiceClient(cc grpc.ClientConnInterface) DirectMessageServiceClient {
	return &directMessageServiceClient{cc}
}

func (c *directMessageServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, DirectMessageService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directMessageServiceClient) ListMessagesBetweenUsers(ctx context.Context, in *ListMessagesBetweenUsersRequest, opts ...grpc.CallOption) (*ListMessagesBetweenUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesBetweenUsersResponse)
	err := c.cc.Invoke(ctx, DirectMessageService_ListMessagesBetweenUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directMessageServiceClient) ListUnseenMessagesForUser(ctx context.Context, in *ListUnseenMessagesForUserRequest, opts ...grpc.CallOption) (*ListUnseenMessagesForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnseenMessagesForUserResponse)
	err := c.cc.Invoke(ctx, DirectMessageService_ListUnseenMessagesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directMessageServiceClient) MarkMessagesAsRead(ctx context.Context, in *MarkMessagesAsReadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DirectMessageService_MarkMessagesAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectMessageServiceServer is the server API for DirectMessageService service.
// All implementations must embed UnimplementedDirectMessageServiceServer
// for forward compatibility.
//
// --- Direct Message Service ---
type DirectMessageServiceServer interface {
	// Send Message
	// POST /api/v1/messages (Receiver specified in body)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// List Messages Between Users
	// GET /api/v1/messages/conversation?userId1=...&userId2=...
	// Requires explicit user IDs as path params might conflict if based on auth user
	ListMessagesBetweenUsers(context.Context, *ListMessagesBetweenUsersRequest) (*ListMessagesBetweenUsersResponse, error)
	// List Unseen Messages For User (Current authenticated user)
	// GET /api/v1/messages/unseen
	ListUnseenMessagesForUser(context.Context, *ListUnseenMessagesForUserRequest) (*ListUnseenMessagesForUserResponse, error)
	// Mark Messages As Read (Current authenticated user marks messages sent to them)
	// POST /api/v1/messages/read
	MarkMessagesAsRead(context.Context, *MarkMessagesAsReadRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDirectMessageServiceServer()
}

// UnimplementedDirectMessageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDirectMessageServiceServer struct{}

func (UnimplementedDirectMessageServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedDirectMessageServiceServer) ListMessagesBetweenUsers(context.Context, *ListMessagesBetweenUsersRequest) (*ListMessagesBetweenUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessagesBetweenUsers not implemented")
}
func (UnimplementedDirectMessageServiceServer) ListUnseenMessagesForUser(context.Context, *ListUnseenMessagesForUserRequest) (*ListUnseenMessagesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnseenMessagesForUser not implemented")
}
func (UnimplementedDirectMessageServiceServer) MarkMessagesAsRead(context.Context, *MarkMessagesAsReadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMessagesAsRead not implemented")
}
func (UnimplementedDirectMessageServiceServer) mustEmbedUnimplementedDirectMessageServiceServer() {}
func (UnimplementedDirectMessageServiceServer) testEmbeddedByValue()                              {}

// UnsafeDirectMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectMessageServiceServer will
// result in compilation errors.
type UnsafeDirectMessageServiceServer interface {
	mustEmbedUnimplementedDirectMessageServiceServer()
}

func RegisterDirectMessageServiceServer(s grpc.ServiceRegistrar, srv DirectMessageServiceServer) {
	// If the following call pancis, it indicates UnimplementedDirectMessageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DirectMessageService_ServiceDesc, srv)
}

func _DirectMessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectMessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectMessageService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectMessageServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectMessageService_ListMessagesBetweenUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesBetweenUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectMessageServiceServer).ListMessagesBetweenUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectMessageService_ListMessagesBetweenUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectMessageServiceServer).ListMessagesBetweenUsers(ctx, req.(*ListMessagesBetweenUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectMessageService_ListUnseenMessagesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnseenMessagesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectMessageServiceServer).ListUnseenMessagesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectMessageService_ListUnseenMessagesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectMessageServiceServer).ListUnseenMessagesForUser(ctx, req.(*ListUnseenMessagesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectMessageService_MarkMessagesAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkMessagesAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectMessageServiceServer).MarkMessagesAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectMessageService_MarkMessagesAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectMessageServiceServer).MarkMessagesAsRead(ctx, req.(*MarkMessagesAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectMessageService_ServiceDesc is the grpc.ServiceDesc for DirectMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userservice.DirectMessageService",
	HandlerType: (*DirectMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _DirectMessageService_SendMessage_Handler,
		},
		{
			MethodName: "ListMessagesBetweenUsers",
			Handler:    _DirectMessageService_ListMessagesBetweenUsers_Handler,
		},
		{
			MethodName: "ListUnseenMessagesForUser",
			Handler:    _DirectMessageService_ListUnseenMessagesForUser_Handler,
		},
		{
			MethodName: "MarkMessagesAsRead",
			Handler:    _DirectMessageService_MarkMessagesAsRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user-service/chat.proto",
}
